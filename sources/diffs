diff --git a/drivers/media/platform/msm/camera_v2/common/Makefile b/drivers/media/platform/msm/camera_v2/common/Makefile
index 202e650b64a..b007a1c5a46 100644
--- a/drivers/media/platform/msm/camera_v2/common/Makefile
+++ b/drivers/media/platform/msm/camera_v2/common/Makefile
@@ -1,2 +1,2 @@
 ccflags-y += -Idrivers/media/platform/msm/camera_v2/
-obj-$(CONFIG_MSMB_CAMERA) += cam_smmu_api.o cam_hw_ops.o
+obj-$(CONFIG_MSMB_CAMERA) += msm_camera_io_util.o cam_smmu_api.o cam_hw_ops.o
diff --git a/drivers/media/platform/msm/camera_v2/sensor/io/msm_camera_io_util.c b/drivers/media/platform/msm/camera_v2/common/msm_camera_io_util.c
similarity index 73%
rename from drivers/media/platform/msm/camera_v2/sensor/io/msm_camera_io_util.c
rename to drivers/media/platform/msm/camera_v2/common/msm_camera_io_util.c
index 6ee319d7f27..f978f97d789 100644
--- a/drivers/media/platform/msm/camera_v2/sensor/io/msm_camera_io_util.c
+++ b/drivers/media/platform/msm/camera_v2/common/msm_camera_io_util.c
@@ -31,6 +31,44 @@ void msm_camera_io_w(u32 data, void __iomem *addr)
 	writel_relaxed((data), (addr));
 }
 
+/* This API is to write a block of data
+* to same address
+*/
+int32_t msm_camera_io_w_block(const u32 *addr, void __iomem *base,
+	u32 len)
+{
+	int i;
+
+	if (!addr || !len || !base)
+		return -EINVAL;
+
+	for (i = 0; i < len; i++) {
+		CDBG("%s: len =%d val=%x base =%p\n", __func__,
+			len, addr[i], base);
+		writel_relaxed(addr[i], base);
+	}
+	return 0;
+}
+
+/* This API is to write a block of registers
+*  which is like a 2 dimensional array table with
+*  register offset and data */
+int32_t msm_camera_io_w_reg_block(const u32 *addr, void __iomem *base,
+	u32 len)
+{
+	int i;
+
+	if (!addr || !len || !base)
+		return -EINVAL;
+
+	for (i = 0; i < len; i = i + 2) {
+		CDBG("%s: len =%d val=%x base =%p reg=%x\n", __func__,
+			len, addr[i + 1], base,  addr[i]);
+		writel_relaxed(addr[i + 1], base + addr[i]);
+	}
+	return 0;
+}
+
 void msm_camera_io_w_mb(u32 data, void __iomem *addr)
 {
 	CDBG("%s: 0x%p %08x\n", __func__,  (addr), (data));
@@ -41,9 +79,29 @@ void msm_camera_io_w_mb(u32 data, void __iomem *addr)
 	wmb();
 }
 
+int32_t msm_camera_io_w_mb_block(const u32 *addr, void __iomem *base, u32 len)
+{
+	int i;
+
+	if (!addr || !len || !base)
+		return -EINVAL;
+
+	for (i = 0; i < len; i++) {
+		/* ensure write is done */
+		wmb();
+		CDBG("%s: len =%d val=%x base =%p\n", __func__,
+			len, addr[i], base);
+		writel_relaxed(addr[i], base);
+	}
+	/* ensure last write is done */
+	wmb();
+	return 0;
+}
+
 u32 msm_camera_io_r(void __iomem *addr)
 {
 	uint32_t data = readl_relaxed(addr);
+
 	CDBG("%s: 0x%p %08x\n", __func__,  (addr), (data));
 	return data;
 }
@@ -71,31 +129,105 @@ void msm_camera_io_memcpy_toio(void __iomem *dest_addr,
 		writel_relaxed(*s++, d++);
 }
 
-void msm_camera_io_dump(void __iomem *addr, int size)
+int32_t msm_camera_io_poll_value(void __iomem *addr, u32 wait_data, u32 retry,
+	unsigned long min_usecs, unsigned long max_usecs)
+{
+	uint32_t tmp, cnt = 0;
+	int32_t rc = 0;
+
+	if (!addr)
+		return -EINVAL;
+
+	tmp = msm_camera_io_r(addr);
+	while ((tmp != wait_data) && (cnt++ < retry)) {
+		if (min_usecs > 0 && max_usecs > 0)
+			usleep_range(min_usecs, max_usecs);
+		tmp = msm_camera_io_r(addr);
+	}
+	if (cnt > retry) {
+		pr_debug("Poll failed by value\n");
+		rc = -EINVAL;
+	}
+	return rc;
+}
+
+int32_t msm_camera_io_poll_value_wmask(void __iomem *addr, u32 wait_data,
+	u32 bmask, u32 retry, unsigned long min_usecs, unsigned long max_usecs)
 {
-	char line_str[BUFF_SIZE_128], *p_str;
+	uint32_t tmp, cnt = 0;
+	int32_t rc = 0;
+
+	if (!addr)
+		return -EINVAL;
+
+	tmp = msm_camera_io_r(addr);
+	while (((tmp & bmask) != wait_data) && (cnt++ < retry)) {
+		if (min_usecs > 0 && max_usecs > 0)
+			usleep_range(min_usecs, max_usecs);
+		tmp = msm_camera_io_r(addr);
+	}
+	if (cnt > retry) {
+		pr_debug("Poll failed with mask\n");
+		rc = -EINVAL;
+	}
+	return rc;
+}
+
+void msm_camera_io_dump(void __iomem *addr, int size, int enable)
+{
+	char line_str[128], *p_str;
 	int i;
 	u32 *p = (u32 *) addr;
 	u32 data;
-	CDBG("%s: %p %d\n", __func__, addr, size);
+
+	CDBG("%s: addr=%p size=%d\n", __func__, addr, size);
+
+	if (!p || (size <= 0) || !enable)
+		return;
+
 	line_str[0] = '\0';
 	p_str = line_str;
 	for (i = 0; i < size/4; i++) {
 		if (i % 4 == 0) {
-			snprintf(p_str, 12, "0x%p: ",  p);
+#ifdef CONFIG_COMPAT
+			snprintf(p_str, 20, "%016lx: ", (unsigned long) p);
+			p_str += 18;
+#else
+			snprintf(p_str, 12, "%08lx: ", (unsigned long) p);
 			p_str += 10;
+#endif
 		}
 		data = readl_relaxed(p++);
-		snprintf(p_str, 12, "%d ", data);
+		snprintf(p_str, 12, "%08x ", data);
 		p_str += 9;
 		if ((i + 1) % 4 == 0) {
-			CDBG("%s\n", line_str);
+			pr_err("%s\n", line_str);
 			line_str[0] = '\0';
 			p_str = line_str;
 		}
 	}
 	if (line_str[0] != '\0')
-		CDBG("%s\n", line_str);
+		pr_err("%s\n", line_str);
+}
+
+void msm_camera_io_dump_wstring_base(void __iomem *addr,
+	struct msm_cam_dump_string_info *dump_data,
+	int size)
+{
+	int i, u = sizeof(struct msm_cam_dump_string_info);
+
+	pr_debug("%s: addr=%p data=%p size=%d u=%d, cnt=%d\n", __func__,
+		addr, dump_data, size, u,
+		(size/u));
+
+	if (!addr || (size <= 0) || !dump_data) {
+		pr_err("%s: addr=%p data=%p size=%d\n", __func__,
+			addr, dump_data, size);
+		return;
+	}
+	for (i = 0; i < (size / u); i++)
+		pr_debug("%s 0x%x\n", (dump_data + i)->print,
+			readl_relaxed((dump_data + i)->offset + addr));
 }
 
 void msm_camera_io_memcpy(void __iomem *dest_addr,
@@ -103,7 +235,6 @@ void msm_camera_io_memcpy(void __iomem *dest_addr,
 {
 	CDBG("%s: %p %p %d\n", __func__, dest_addr, src_addr, len);
 	msm_camera_io_memcpy_toio(dest_addr, src_addr, len / 4);
-	msm_camera_io_dump(dest_addr, len);
 }
 
 void msm_camera_io_memcpy_mb(void __iomem *dest_addr,
@@ -156,6 +287,7 @@ int msm_cam_clk_enable(struct device *dev, struct msm_cam_clk_info *clk_info,
 	int i;
 	int rc = 0;
 	long clk_rate;
+
 	if (enable) {
 		for (i = 0; i < num_clk; i++) {
 			CDBG("%s enable %s\n", __func__, clk_info[i].clk_name);
@@ -438,6 +570,7 @@ void msm_camera_bus_scale_cfg(uint32_t bus_perf_client,
 		enum msm_bus_perf_setting perf_setting)
 {
 	int rc = 0;
+
 	if (!bus_perf_client) {
 		pr_err("%s: Bus Client NOT Registered!!!\n", __func__);
 		return;
@@ -623,3 +756,88 @@ int msm_camera_request_gpio_table(struct gpio *gpio_tbl, uint8_t size,
 	}
 	return rc;
 }
+
+/*
+ * msm_camera_get_dt_reg_settings - Get dt reg settings from device-tree.
+ * @of_node: Pointer to device of_node from dev.
+ * @dt_prop_name: String of the property to search in of_node from dev.
+ * @reg_s: Double pointer will be allocated by this function and filled.
+ * @size: Pointer to fill the length of the available entries.
+ */
+int msm_camera_get_dt_reg_settings(struct device_node *of_node,
+	const char *dt_prop_name, uint32_t **reg_s,
+	unsigned int *size)
+{
+	int ret;
+	unsigned int cnt;
+
+	if (!of_node || !dt_prop_name || !size || !reg_s) {
+		pr_err("%s: Error invalid args %p:%p:%p:%p\n",
+			__func__, size, reg_s, of_node, dt_prop_name);
+		return -EINVAL;
+	}
+	if (!of_get_property(of_node, dt_prop_name, &cnt)) {
+		pr_debug("Missing dt reg settings for %s\n", dt_prop_name);
+		return -ENOENT;
+	}
+
+	if (!cnt || (cnt % 8)) {
+		pr_err("%s: Error invalid number of entries cnt=%d\n",
+			__func__, cnt);
+		return -EINVAL;
+	}
+	cnt /= 4;
+	if (cnt != 0) {
+		*reg_s = kcalloc(cnt, sizeof(uint32_t),
+				GFP_KERNEL);
+		if (!*reg_s)
+			return -ENOMEM;
+		ret = of_property_read_u32_array(of_node,
+				dt_prop_name,
+				*reg_s,
+				cnt);
+		if (ret < 0) {
+			pr_err("%s: No dt reg info read for %s ret=%d\n",
+				__func__, dt_prop_name, ret);
+			kfree(*reg_s);
+			return -ENOENT;
+		}
+		*size = cnt;
+	} else {
+		pr_err("%s: Error invalid entries\n", __func__);
+		return -EINVAL;
+	}
+
+	return ret;
+}
+
+/*
+ * msm_camera_get_dt_reg_settings - Free dt reg settings memory.
+ * @reg_s: Double pointer will be allocated by this function and filled.
+ * @size: Pointer to set the length as invalid.
+ */
+void msm_camera_put_dt_reg_settings(uint32_t **reg_s,
+	unsigned int *size)
+{
+	kfree(*reg_s);
+	*reg_s = NULL;
+	*size = 0;
+}
+
+int msm_camera_hw_write_dt_reg_settings(void __iomem *base,
+	uint32_t *reg_s,
+	unsigned int size)
+{
+	int32_t rc = 0;
+
+	if (!reg_s || !base || !size) {
+		pr_err("%s: Error invalid args\n", __func__);
+		return -EINVAL;
+	}
+	rc = msm_camera_io_w_reg_block((const u32 *) reg_s,
+		base, size);
+	if (rc < 0)
+		pr_err("%s: Failed dt reg setting write\n", __func__);
+	return rc;
+}
+
diff --git a/drivers/media/platform/msm/camera_v2/sensor/io/msm_camera_io_util.h b/drivers/media/platform/msm/camera_v2/common/msm_camera_io_util.h
similarity index 69%
rename from drivers/media/platform/msm/camera_v2/sensor/io/msm_camera_io_util.h
rename to drivers/media/platform/msm/camera_v2/common/msm_camera_io_util.h
index 2a0e21ccaa6..04c8822330f 100644
--- a/drivers/media/platform/msm/camera_v2/sensor/io/msm_camera_io_util.h
+++ b/drivers/media/platform/msm/camera_v2/common/msm_camera_io_util.h
@@ -31,11 +31,16 @@ struct msm_gpio_set_tbl {
 	uint32_t delay;
 };
 
+struct msm_cam_dump_string_info {
+	const char *print;
+	uint32_t offset;
+};
+
 void msm_camera_io_w(u32 data, void __iomem *addr);
 void msm_camera_io_w_mb(u32 data, void __iomem *addr);
 u32 msm_camera_io_r(void __iomem *addr);
 u32 msm_camera_io_r_mb(void __iomem *addr);
-void msm_camera_io_dump(void __iomem *addr, int size);
+void msm_camera_io_dump(void __iomem *addr, int size, int enable);
 void msm_camera_io_memcpy(void __iomem *dest_addr,
 		void __iomem *src_addr, u32 len);
 void msm_camera_io_memcpy_mb(void __iomem *dest_addr,
@@ -66,5 +71,23 @@ int msm_camera_config_single_vreg(struct device *dev,
 
 int msm_camera_request_gpio_table(struct gpio *gpio_tbl, uint8_t size,
 	int gpio_en);
-
+void msm_camera_io_dump_wstring_base(void __iomem *addr,
+	struct msm_cam_dump_string_info *dump_data,
+	int size);
+int32_t msm_camera_io_poll_value_wmask(void __iomem *addr, u32 wait_data,
+	u32 bmask, u32 retry, unsigned long min_usecs,
+	unsigned long max_usecs);
+int32_t msm_camera_io_poll_value(void __iomem *addr, u32 wait_data, u32 retry,
+	unsigned long min_usecs, unsigned long max_usecs);
+int32_t msm_camera_io_w_block(const u32 *addr, void __iomem *base, u32 len);
+int32_t msm_camera_io_w_reg_block(const u32 *addr, void __iomem *base, u32 len);
+int32_t msm_camera_io_w_mb_block(const u32 *addr, void __iomem *base, u32 len);
+int msm_camera_get_dt_reg_settings(struct device_node *of_node,
+	const char *dt_prop_name, uint32_t **reg_s,
+	unsigned int *size);
+void msm_camera_put_dt_reg_settings(uint32_t **reg_s,
+	unsigned int *size);
+int msm_camera_hw_write_dt_reg_settings(void __iomem *base,
+	uint32_t *reg_s,
+	unsigned int size);
 #endif
diff --git a/drivers/media/platform/msm/camera_v2/fd/msm_fd_hw.c b/drivers/media/platform/msm/camera_v2/fd/msm_fd_hw.c
index 68172495d2d..79bd0882af5 100644
--- a/drivers/media/platform/msm/camera_v2/fd/msm_fd_hw.c
+++ b/drivers/media/platform/msm/camera_v2/fd/msm_fd_hw.c
@@ -29,6 +29,7 @@
 #include "msm_fd_hw.h"
 #include "msm_fd_regs.h"
 #include "cam_smmu_api.h"
+#include "msm_camera_io_util.h"
 
 /* After which revision misc irq for engine is needed */
 #define MSM_FD_MISC_IRQ_FROM_REV 0x10010000
@@ -52,7 +53,7 @@
 static inline u32 msm_fd_hw_read_reg(struct msm_fd_device *fd,
 	enum msm_fd_mem_resources base_idx, u32 reg)
 {
-	return readl_relaxed(fd->iomem_base[base_idx] + reg);
+	return msm_camera_io_r(fd->iomem_base[base_idx] + reg);
 }
 
 /*
@@ -65,7 +66,7 @@ static inline u32 msm_fd_hw_read_reg(struct msm_fd_device *fd,
 static inline void msm_fd_hw_write_reg(struct msm_fd_device *fd,
 	enum msm_fd_mem_resources base_idx, u32 reg, u32 value)
 {
-	writel_relaxed(value, fd->iomem_base[base_idx] + reg);
+	msm_camera_io_w(value, fd->iomem_base[base_idx] + reg);
 }
 
 /*
diff --git a/drivers/media/platform/msm/camera_v2/isp/msm_isp40.c b/drivers/media/platform/msm/camera_v2/isp/msm_isp40.c
index 9441fa8d2ab..ce8045b28ec 100644
--- a/drivers/media/platform/msm/camera_v2/isp/msm_isp40.c
+++ b/drivers/media/platform/msm/camera_v2/isp/msm_isp40.c
@@ -1624,8 +1624,8 @@ static void msm_vfe40_cfg_axi_ub(struct vfe_device *vfe_dev)
 static void msm_vfe40_read_wm_ping_pong_addr(
 	struct vfe_device *vfe_dev)
 {
-	msm_camera_io_dump_2(vfe_dev->vfe_base +
-		(VFE40_WM_BASE(0) & 0xFFFFFFF0), 0x200);
+	msm_camera_io_dump(vfe_dev->vfe_base +
+		(VFE40_WM_BASE(0) & 0xFFFFFFF0), 0x200, 1);
 }
 
 static void msm_vfe40_update_ping_pong_addr(
diff --git a/drivers/media/platform/msm/camera_v2/isp/msm_isp44.c b/drivers/media/platform/msm/camera_v2/isp/msm_isp44.c
index 785c4afa083..6ecd163a314 100644
--- a/drivers/media/platform/msm/camera_v2/isp/msm_isp44.c
+++ b/drivers/media/platform/msm/camera_v2/isp/msm_isp44.c
@@ -385,7 +385,7 @@ static void msm_vfe44_process_error_status(struct vfe_device *vfe_dev)
 	if (error_status1 & (1 << 0)) {
 		pr_err("%s: camif error status: 0x%x\n",
 			__func__, vfe_dev->error_info.camif_status);
-		msm_camera_io_dump_2(vfe_dev->vfe_base + 0x2f4, 0x30);
+		msm_camera_io_dump(vfe_dev->vfe_base + 0x2f4, 0x30, 1);
 	}
 	if (error_status1 & (1 << 1))
 		pr_err("%s: stats bhist overwrite\n", __func__);
@@ -1368,8 +1368,8 @@ static void msm_vfe44_cfg_axi_ub(struct vfe_device *vfe_dev)
 static void msm_vfe44_read_wm_ping_pong_addr(
 	struct vfe_device *vfe_dev)
 {
-	msm_camera_io_dump_2(vfe_dev->vfe_base +
-		(VFE44_WM_BASE(0) & 0xFFFFFFF0), 0x200);
+	msm_camera_io_dump(vfe_dev->vfe_base +
+		(VFE44_WM_BASE(0) & 0xFFFFFFF0), 0x200, 1);
 }
 
 static void msm_vfe44_update_ping_pong_addr(
diff --git a/drivers/media/platform/msm/camera_v2/isp/msm_isp46.c b/drivers/media/platform/msm/camera_v2/isp/msm_isp46.c
index cc790505672..ec49c65fc0e 100644
--- a/drivers/media/platform/msm/camera_v2/isp/msm_isp46.c
+++ b/drivers/media/platform/msm/camera_v2/isp/msm_isp46.c
@@ -1431,8 +1431,8 @@ static void msm_vfe46_cfg_axi_ub(struct vfe_device *vfe_dev)
 static void msm_vfe46_read_wm_ping_pong_addr(
 	struct vfe_device *vfe_dev)
 {
-	msm_camera_io_dump_2(vfe_dev->vfe_base +
-		(VFE46_WM_BASE(0) & 0xFFFFFFF0), 0x200);
+	msm_camera_io_dump(vfe_dev->vfe_base +
+		(VFE46_WM_BASE(0) & 0xFFFFFFF0), 0x200, 1);
 }
 
 static void msm_vfe46_update_ping_pong_addr(
diff --git a/drivers/media/platform/msm/camera_v2/isp/msm_isp47.c b/drivers/media/platform/msm/camera_v2/isp/msm_isp47.c
index 38cf27087ec..30816708f6f 100644
--- a/drivers/media/platform/msm/camera_v2/isp/msm_isp47.c
+++ b/drivers/media/platform/msm/camera_v2/isp/msm_isp47.c
@@ -1591,8 +1591,8 @@ static void msm_vfe47_cfg_axi_ub(struct vfe_device *vfe_dev)
 static void msm_vfe47_read_wm_ping_pong_addr(
 	struct vfe_device *vfe_dev)
 {
-	msm_camera_io_dump_2(vfe_dev->vfe_base +
-		(VFE47_WM_BASE(0) & 0xFFFFFFF0), 0x200);
+	msm_camera_io_dump(vfe_dev->vfe_base +
+		(VFE47_WM_BASE(0) & 0xFFFFFFF0), 0x200, 1);
 }
 
 static void msm_vfe47_update_ping_pong_addr(
diff --git a/drivers/media/platform/msm/camera_v2/isp/msm_isp_axi_util.c b/drivers/media/platform/msm/camera_v2/isp/msm_isp_axi_util.c
index b7ef685b2fc..9af21022380 100644
--- a/drivers/media/platform/msm/camera_v2/isp/msm_isp_axi_util.c
+++ b/drivers/media/platform/msm/camera_v2/isp/msm_isp_axi_util.c
@@ -2289,7 +2289,8 @@ static int msm_isp_start_axi_stream(struct vfe_device *vfe_dev,
 			wait_for_complete = 1;
 		} else {
 			if (vfe_dev->dump_reg)
-				msm_camera_io_dump_2(vfe_dev->vfe_base, 0x900);
+				msm_camera_io_dump(vfe_dev->vfe_base,
+					0x900, 1);
 
 			/*Configure AXI start bits to start immediately*/
 			msm_isp_axi_stream_enable_cfg(vfe_dev, stream_info);
diff --git a/drivers/media/platform/msm/camera_v2/isp/msm_isp_util.c b/drivers/media/platform/msm/camera_v2/isp/msm_isp_util.c
index c34fd52227e..1af9f3a30b9 100644
--- a/drivers/media/platform/msm/camera_v2/isp/msm_isp_util.c
+++ b/drivers/media/platform/msm/camera_v2/isp/msm_isp_util.c
@@ -79,39 +79,6 @@ static struct msm_bus_scale_pdata msm_isp_bus_client_pdata = {
 	.name = "msm_camera_isp",
 };
 
-
-void msm_camera_io_dump_2(void __iomem *addr, int size)
-{
-	char line_str[128], *p_str;
-	int i;
-	u32 *p = (u32 *) addr;
-	u32 data;
-	pr_err("%s: %p %d\n", __func__, addr, size);
-	line_str[0] = '\0';
-	p_str = line_str;
-	for (i = 0; i < size/4; i++) {
-		if (i % 4 == 0) {
-#ifdef CONFIG_COMPAT
-			snprintf(p_str, 20, "%016lx: ", (unsigned long) p);
-			p_str += 18;
-#else
-			snprintf(p_str, 12, "%08lx: ", (unsigned long) p);
-			p_str += 10;
-#endif
-		}
-		data = readl_relaxed(p++);
-		snprintf(p_str, 12, "%08x ", data);
-		p_str += 9;
-		if ((i + 1) % 4 == 0) {
-			pr_err("%s\n", line_str);
-			line_str[0] = '\0';
-			p_str = line_str;
-		}
-	}
-	if (line_str[0] != '\0')
-		pr_err("%s\n", line_str);
-}
-
 void msm_isp_print_fourcc_error(const char *origin, uint32_t fourcc_format)
 {
 	int i;
diff --git a/drivers/media/platform/msm/camera_v2/isp/msm_isp_util.h b/drivers/media/platform/msm/camera_v2/isp/msm_isp_util.h
index de115707f3a..0dc86b9c3cb 100644
--- a/drivers/media/platform/msm/camera_v2/isp/msm_isp_util.h
+++ b/drivers/media/platform/msm/camera_v2/isp/msm_isp_util.h
@@ -14,6 +14,7 @@
 
 #include "msm_isp.h"
 #include <soc/qcom/camera2.h>
+#include "msm_camera_io_util.h"
 
 /* #define CONFIG_MSM_ISP_DBG 1 */
 
@@ -75,7 +76,6 @@ int msm_isp_get_clk_info(struct vfe_device *vfe_dev,
 	struct platform_device *pdev, struct msm_cam_clk_info *vfe_clk_info);
 void msm_isp_fetch_engine_done_notify(struct vfe_device *vfe_dev,
 	struct msm_vfe_fetch_engine_info *fetch_engine_info);
-void msm_camera_io_dump_2(void __iomem *addr, int size);
 void msm_isp_print_fourcc_error(const char *origin, uint32_t fourcc_format);
 void msm_isp_flush_tasklet(struct vfe_device *vfe_dev);
 void msm_isp_save_framedrop_values(struct vfe_device *vfe_dev);
diff --git a/drivers/media/platform/msm/camera_v2/ispif/msm_ispif.c b/drivers/media/platform/msm/camera_v2/ispif/msm_ispif.c
index 32721fae3d5..8010e6c512f 100644
--- a/drivers/media/platform/msm/camera_v2/ispif/msm_ispif.c
+++ b/drivers/media/platform/msm/camera_v2/ispif/msm_ispif.c
@@ -65,7 +65,7 @@ static void msm_ispif_io_dump_reg(struct ispif_device *ispif)
 {
 	if (!ispif->enb_dump_reg)
 		return;
-	msm_camera_io_dump(ispif->base, 0x250);
+	msm_camera_io_dump(ispif->base, 0x250, 0);
 }
 
 
diff --git a/drivers/media/platform/msm/camera_v2/jpeg_10/msm_jpeg_hw.c b/drivers/media/platform/msm/camera_v2/jpeg_10/msm_jpeg_hw.c
index aa30af4a0ec..9339029dbc0 100644
--- a/drivers/media/platform/msm/camera_v2/jpeg_10/msm_jpeg_hw.c
+++ b/drivers/media/platform/msm/camera_v2/jpeg_10/msm_jpeg_hw.c
@@ -14,6 +14,7 @@
 #include <linux/delay.h>
 #include "msm_jpeg_hw.h"
 #include "msm_jpeg_common.h"
+#include "msm_camera_io_util.h"
 
 #include <linux/io.h>
 
@@ -306,15 +307,15 @@ struct msm_jpeg_hw_cmd hw_cmd_we_ping_update[] = {
 void msm_jpeg_decode_status(void *base)
 {
 	uint32_t data;
-	data = readl_relaxed(base + JPEG_DECODE_MCUS_DECODED_STATUS);
+	data = msm_camera_io_r(base + JPEG_DECODE_MCUS_DECODED_STATUS);
 	JPEG_DBG_HIGH("Decode MCUs decode status %u", data);
-	data = readl_relaxed(base + JPEG_DECODE_BITS_CONSUMED_STATUS);
+	data = msm_camera_io_r(base + JPEG_DECODE_BITS_CONSUMED_STATUS);
 	JPEG_DBG_HIGH("Decode bits consumed status %u", data);
-	data = readl_relaxed(base + JPEG_DECODE_PRED_Y_STATE);
+	data = msm_camera_io_r(base + JPEG_DECODE_PRED_Y_STATE);
 	JPEG_DBG_HIGH("Decode prediction Y state %u", data);
-	data = readl_relaxed(base + JPEG_DECODE_PRED_C_STATE);
+	data = msm_camera_io_r(base + JPEG_DECODE_PRED_C_STATE);
 	JPEG_DBG_HIGH("Decode prediction C state %u", data);
-	data = readl_relaxed(base + JPEG_DECODE_RSM_STATE);
+	data = msm_camera_io_r(base + JPEG_DECODE_RSM_STATE);
 	JPEG_DBG_HIGH("Decode prediction RSM state %u", data);
 }
 
@@ -781,7 +782,7 @@ uint32_t msm_jpeg_hw_read(struct msm_jpeg_hw_cmd *hw_cmd_p,
 
 	paddr = jpeg_region_base + hw_cmd_p->offset;
 
-	data = readl_relaxed(paddr);
+	data = msm_camera_io_r(paddr);
 	data &= hw_cmd_p->mask;
 
 	return data;
@@ -798,7 +799,7 @@ void msm_jpeg_hw_write(struct msm_jpeg_hw_cmd *hw_cmd_p,
 	if (hw_cmd_p->mask == 0xffffffff) {
 		old_data = 0;
 	} else {
-		old_data = readl_relaxed(paddr);
+		old_data = msm_camera_io_r(paddr);
 		old_data &= ~hw_cmd_p->mask;
 	}
 
@@ -806,7 +807,7 @@ void msm_jpeg_hw_write(struct msm_jpeg_hw_cmd *hw_cmd_p,
 	new_data |= old_data;
 	JPEG_DBG("%s:%d] %p %08x\n", __func__, __LINE__,
 		paddr, new_data);
-	writel_relaxed(new_data, paddr);
+	msm_camera_io_w(new_data, paddr);
 }
 
 int msm_jpeg_hw_wait(struct msm_jpeg_hw_cmd *hw_cmd_p, int m_us,
@@ -915,7 +916,7 @@ void msm_jpeg_io_dump(void *base, int size)
 			snprintf(p_str, 12, "%08lx: ", (unsigned long)p);
 			p_str += 10;
 		}
-		data = readl_relaxed(p++);
+		data = msm_camera_io_r(p++);
 		snprintf(p_str, 12, "%08x ", data);
 		p_str += 9;
 		if ((i + 1) % 4 == 0) {
diff --git a/drivers/media/platform/msm/camera_v2/jpeg_10/msm_jpeg_platform.c b/drivers/media/platform/msm/camera_v2/jpeg_10/msm_jpeg_platform.c
index af991443c7c..8716f3e0790 100644
--- a/drivers/media/platform/msm/camera_v2/jpeg_10/msm_jpeg_platform.c
+++ b/drivers/media/platform/msm/camera_v2/jpeg_10/msm_jpeg_platform.c
@@ -25,6 +25,7 @@
 #include <linux/dma-attrs.h>
 #include <linux/dma-buf.h>
 
+#include "msm_camera_io_util.h"
 #include "msm_jpeg_platform.h"
 #include "msm_jpeg_sync.h"
 #include "msm_jpeg_common.h"
@@ -242,51 +243,51 @@ uint32_t msm_jpeg_platform_v2p(struct msm_jpeg_device *pgmn_dev, int fd,
 static void set_vbif_params(struct msm_jpeg_device *pgmn_dev,
 	 void *jpeg_vbif_base)
 {
-	writel_relaxed(0x1,
+	msm_camera_io_w(0x1,
 		jpeg_vbif_base + JPEG_VBIF_CLKON);
 
 	if (pgmn_dev->hw_version != JPEG_8994) {
-		writel_relaxed(0x10101010,
+		msm_camera_io_w(0x10101010,
 			jpeg_vbif_base + JPEG_VBIF_IN_RD_LIM_CONF0);
-		writel_relaxed(0x10101010,
+		msm_camera_io_w(0x10101010,
 			jpeg_vbif_base + JPEG_VBIF_IN_RD_LIM_CONF1);
-		writel_relaxed(0x10101010,
+		msm_camera_io_w(0x10101010,
 			jpeg_vbif_base + JPEG_VBIF_IN_RD_LIM_CONF2);
-		writel_relaxed(0x10101010,
+		msm_camera_io_w(0x10101010,
 			jpeg_vbif_base + JPEG_VBIF_IN_WR_LIM_CONF0);
-		writel_relaxed(0x10101010,
+		msm_camera_io_w(0x10101010,
 			jpeg_vbif_base + JPEG_VBIF_IN_WR_LIM_CONF1);
-		writel_relaxed(0x10101010,
+		msm_camera_io_w(0x10101010,
 			jpeg_vbif_base + JPEG_VBIF_IN_WR_LIM_CONF2);
-		writel_relaxed(0x00001010,
+		msm_camera_io_w(0x00001010,
 			jpeg_vbif_base + JPEG_VBIF_OUT_RD_LIM_CONF0);
-		writel_relaxed(0x00000110,
+		msm_camera_io_w(0x00000110,
 			jpeg_vbif_base + JPEG_VBIF_OUT_WR_LIM_CONF0);
-		writel_relaxed(0x00000707,
+		msm_camera_io_w(0x00000707,
 			jpeg_vbif_base + JPEG_VBIF_DDR_OUT_MAX_BURST);
-		writel_relaxed(0x00000FFF,
+		msm_camera_io_w(0x00000FFF,
 			jpeg_vbif_base + JPEG_VBIF_OUT_AXI_AOOO_EN);
-		writel_relaxed(0x0FFF0FFF,
+		msm_camera_io_w(0x0FFF0FFF,
 			jpeg_vbif_base + JPEG_VBIF_OUT_AXI_AOOO);
-		writel_relaxed(0x2222,
+		msm_camera_io_w(0x2222,
 			jpeg_vbif_base + JPEG_VBIF_OUT_AXI_AMEMTYPE_CONF1);
 	}
 
-	writel_relaxed(0x7,
+	msm_camera_io_w(0x7,
 		jpeg_vbif_base + JPEG_VBIF_OCMEM_OUT_MAX_BURST);
-	writel_relaxed(0x00000030,
+	msm_camera_io_w(0x00000030,
 		jpeg_vbif_base + JPEG_VBIF_ARB_CTL);
 
 	/*FE and WE QOS configuration need to be set when
 	QOS RR arbitration is enabled*/
 	if (pgmn_dev->hw_version != JPEG_8974_V1)
-		writel_relaxed(0x00000003,
+		msm_camera_io_w(0x00000003,
 				jpeg_vbif_base + JPEG_VBIF_ROUND_ROBIN_QOS_ARB);
 	else
-		writel_relaxed(0x00000001,
+		msm_camera_io_w(0x00000001,
 				jpeg_vbif_base + JPEG_VBIF_ROUND_ROBIN_QOS_ARB);
 
-	writel_relaxed(0x22222222,
+	msm_camera_io_w(0x22222222,
 		jpeg_vbif_base + JPEG_VBIF_OUT_AXI_AMEMTYPE_CONF0);
 
 }
@@ -349,7 +350,7 @@ static int32_t msm_jpeg_set_init_dt_parms(struct msm_jpeg_device *pgmn_dev,
 					__func__, __LINE__,
 					base + dt_reg_settings[i],
 					dt_reg_settings[i + 1]);
-			writel_relaxed(dt_reg_settings[i + 1],
+			msm_camera_io_w(dt_reg_settings[i + 1],
 					base + dt_reg_settings[i]);
 		}
 		kfree(dt_reg_settings);
@@ -505,7 +506,7 @@ int msm_jpeg_platform_init(struct platform_device *pdev,
 		goto fail_clk;
 	}
 
-	pgmn_dev->hw_version = readl_relaxed(jpeg_base +
+	pgmn_dev->hw_version = msm_camera_io_r(jpeg_base +
 		JPEG_HW_VERSION);
 	JPEG_DBG_HIGH("%s:%d] jpeg HW version 0x%x", __func__, __LINE__,
 		pgmn_dev->hw_version);
diff --git a/drivers/media/platform/msm/camera_v2/jpeg_dma/msm_jpeg_dma_hw.c b/drivers/media/platform/msm/camera_v2/jpeg_dma/msm_jpeg_dma_hw.c
index 7ca36675048..1522ee4b543 100644
--- a/drivers/media/platform/msm/camera_v2/jpeg_dma/msm_jpeg_dma_hw.c
+++ b/drivers/media/platform/msm/camera_v2/jpeg_dma/msm_jpeg_dma_hw.c
@@ -24,6 +24,7 @@
 #include <linux/msm-bus-board.h>
 #include <media/videobuf2-core.h>
 
+#include "msm_camera_io_util.h"
 #include "cam_smmu_api.h"
 #include "msm_jpeg_dma_dev.h"
 #include "msm_jpeg_dma_hw.h"
@@ -79,7 +80,7 @@ static const struct msm_jpegdma_block msm_jpegdma_block_sel[] = {
 static inline u32 msm_jpegdma_hw_read_reg(struct msm_jpegdma_device *dma,
 	enum msm_jpegdma_mem_resources base_idx, u32 reg)
 {
-	return readl_relaxed(dma->iomem_base[base_idx] + reg);
+	return msm_camera_io_r(dma->iomem_base[base_idx] + reg);
 }
 
 /*
@@ -95,7 +96,7 @@ static inline void msm_jpegdma_hw_write_reg(struct msm_jpegdma_device *dma,
 	pr_debug("%s:%d]%p %08x\n", __func__, __LINE__,
 		dma->iomem_base[base_idx] + reg,
 		value);
-	writel_relaxed(value, dma->iomem_base[base_idx] + reg);
+	msm_camera_io_w(value, dma->iomem_base[base_idx] + reg);
 }
 
 /*
diff --git a/drivers/media/platform/msm/camera_v2/pproc/cpp/msm_cpp.c b/drivers/media/platform/msm/camera_v2/pproc/cpp/msm_cpp.c
index 4d986626154..1bcf682fc5c 100644
--- a/drivers/media/platform/msm/camera_v2/pproc/cpp/msm_cpp.c
+++ b/drivers/media/platform/msm/camera_v2/pproc/cpp/msm_cpp.c
@@ -326,7 +326,7 @@ static int msm_cpp_enable_debugfs(struct cpp_device *cpp_dev);
 
 static void msm_cpp_write(u32 data, void __iomem *cpp_base)
 {
-	writel_relaxed((data), cpp_base + MSM_CPP_MICRO_FIFO_RX_DATA);
+	msm_camera_io_w((data), cpp_base + MSM_CPP_MICRO_FIFO_RX_DATA);
 }
 
 static void msm_cpp_clear_timer(struct cpp_device *cpp_dev)
diff --git a/drivers/media/platform/msm/camera_v2/pproc/vpe/msm_vpe.c b/drivers/media/platform/msm/camera_v2/pproc/vpe/msm_vpe.c
index 2f136b943d3..852f0d59bb3 100644
--- a/drivers/media/platform/msm/camera_v2/pproc/vpe/msm_vpe.c
+++ b/drivers/media/platform/msm/camera_v2/pproc/vpe/msm_vpe.c
@@ -994,12 +994,12 @@ static int vpe_start(struct vpe_device *vpe_dev)
 {
 	/*  enable the frame irq, bit 0 = Display list 0 ROI done */
 	msm_camera_io_w_mb(1, vpe_dev->base + VPE_INTR_ENABLE_OFFSET);
-	msm_camera_io_dump(vpe_dev->base, 0x120);
-	msm_camera_io_dump(vpe_dev->base + 0x00400, 0x18);
-	msm_camera_io_dump(vpe_dev->base + 0x10000, 0x250);
-	msm_camera_io_dump(vpe_dev->base + 0x30000, 0x20);
-	msm_camera_io_dump(vpe_dev->base + 0x50000, 0x30);
-	msm_camera_io_dump(vpe_dev->base + 0x50400, 0x10);
+	msm_camera_io_dump(vpe_dev->base, 0x120, CONFIG_MSM_VPE_DBG);
+	msm_camera_io_dump(vpe_dev->base + 0x00400, 0x18, CONFIG_MSM_VPE_DBG);
+	msm_camera_io_dump(vpe_dev->base + 0x10000, 0x250, CONFIG_MSM_VPE_DBG);
+	msm_camera_io_dump(vpe_dev->base + 0x30000, 0x20, CONFIG_MSM_VPE_DBG);
+	msm_camera_io_dump(vpe_dev->base + 0x50000, 0x30, CONFIG_MSM_VPE_DBG);
+	msm_camera_io_dump(vpe_dev->base + 0x50400, 0x10, CONFIG_MSM_VPE_DBG);
 
 	/*
 	 * This triggers the operation. When the VPE is done,
diff --git a/drivers/media/platform/msm/camera_v2/sensor/Makefile b/drivers/media/platform/msm/camera_v2/sensor/Makefile
index 178db5e5c04..539ba24e109 100644
--- a/drivers/media/platform/msm/camera_v2/sensor/Makefile
+++ b/drivers/media/platform/msm/camera_v2/sensor/Makefile
@@ -1,4 +1,5 @@
 ccflags-y += -Idrivers/media/platform/msm/camera_v2
+ccflags-y += -Idrivers/media/platform/msm/camera_v2/common
 ccflags-y += -Idrivers/media/platform/msm/camera_v2/msm_vb2
 ccflags-y += -Idrivers/media/platform/msm/camera_v2/camera
 ccflags-y += -Idrivers/media/platform/msm/camera_v2/sensor/io
diff --git a/drivers/media/platform/msm/camera_v2/sensor/actuator/Makefile b/drivers/media/platform/msm/camera_v2/sensor/actuator/Makefile
index c0d607f731b..37dda0f3089 100644
--- a/drivers/media/platform/msm/camera_v2/sensor/actuator/Makefile
+++ b/drivers/media/platform/msm/camera_v2/sensor/actuator/Makefile
@@ -1,4 +1,5 @@
 ccflags-y += -Idrivers/media/platform/msm/camera_v2
+ccflags-y += -Idrivers/media/platform/msm/camera_v2/common
 ccflags-y += -Idrivers/media/platform/msm/camera_v2/sensor/io
 ccflags-y += -Idrivers/media/platform/msm/camera_v2/sensor/cci
 obj-$(CONFIG_MSMB_CAMERA) += msm_actuator.o
diff --git a/drivers/media/platform/msm/camera_v2/sensor/eeprom/Makefile b/drivers/media/platform/msm/camera_v2/sensor/eeprom/Makefile
index de843fb8708..ba78a650b4b 100644
--- a/drivers/media/platform/msm/camera_v2/sensor/eeprom/Makefile
+++ b/drivers/media/platform/msm/camera_v2/sensor/eeprom/Makefile
@@ -1,4 +1,5 @@
 ccflags-y += -Idrivers/media/platform/msm/camera_v2
+ccflags-y += -Idrivers/media/platform/msm/camera_v2/common
 ccflags-y += -Idrivers/media/platform/msm/camera_v2/sensor/io
 ccflags-y += -Idrivers/media/platform/msm/camera_v2/sensor/cci
 obj-$(CONFIG_MSM_EEPROM) += msm_eeprom.o
diff --git a/drivers/media/platform/msm/camera_v2/sensor/flash/Makefile b/drivers/media/platform/msm/camera_v2/sensor/flash/Makefile
index bc173adf4eb..6a28da5926c 100644
--- a/drivers/media/platform/msm/camera_v2/sensor/flash/Makefile
+++ b/drivers/media/platform/msm/camera_v2/sensor/flash/Makefile
@@ -1,4 +1,5 @@
 ccflags-y += -Idrivers/media/platform/msm/camera_v2/sensor/cci
 ccflags-y += -Idrivers/media/platform/msm/camera_v2
+ccflags-y += -Idrivers/media/platform/msm/camera_v2/common
 ccflags-y += -Idrivers/media/platform/msm/camera_v2/sensor/io
 obj-$(CONFIG_MSMB_CAMERA) += msm_flash.o
diff --git a/drivers/media/platform/msm/camera_v2/sensor/io/Makefile b/drivers/media/platform/msm/camera_v2/sensor/io/Makefile
index 55f52311876..ec958697ae1 100644
--- a/drivers/media/platform/msm/camera_v2/sensor/io/Makefile
+++ b/drivers/media/platform/msm/camera_v2/sensor/io/Makefile
@@ -1,4 +1,5 @@
 ccflags-y += -Idrivers/media/platform/msm/camera_v2/
+ccflags-y += -Idrivers/media/platform/msm/camera_v2/common
 ccflags-y += -Idrivers/media/platform/msm/camera_v2/sensor
 ccflags-y += -Idrivers/media/platform/msm/camera_v2/sensor/cci
-obj-$(CONFIG_MSMB_CAMERA)   += msm_camera_io_util.o msm_camera_cci_i2c.o msm_camera_qup_i2c.o msm_camera_spi.o msm_camera_dt_util.o
+obj-$(CONFIG_MSMB_CAMERA)   += msm_camera_cci_i2c.o msm_camera_qup_i2c.o msm_camera_spi.o msm_camera_dt_util.o
diff --git a/drivers/media/platform/msm/camera_v2/sensor/ois/Makefile b/drivers/media/platform/msm/camera_v2/sensor/ois/Makefile
index 04bc88cd876..f09c92acb57 100644
--- a/drivers/media/platform/msm/camera_v2/sensor/ois/Makefile
+++ b/drivers/media/platform/msm/camera_v2/sensor/ois/Makefile
@@ -1,4 +1,5 @@
 ccflags-y += -Idrivers/media/platform/msm/camera_v2
+ccflags-y += -Idrivers/media/platform/msm/camera_v2/common
 ccflags-y += -Idrivers/media/platform/msm/camera_v2/sensor/io
 ccflags-y += -Idrivers/media/platform/msm/camera_v2/sensor/cci
 obj-$(CONFIG_MSMB_CAMERA) += msm_ois.o